# Generated by Django 3.2.5 on 2021-07-26 04:33

import accounts.models.group.managers
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('last_updated_by', models.UUIDField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('meta', models.JSONField(blank=True, default=dict, null=True)),
                ('username', models.CharField(max_length=50, unique=True, validators=[django.core.validators.RegexValidator(code='Invalid Username', message='Username can only contain alphanumeric characters and the following characters: . -', regex='^[a-zA-Z0-9.-]*$')])),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('username', '-created'),
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('last_updated_by', models.UUIDField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('meta', models.JSONField(blank=True, default=dict, null=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, max_length=200, populate_from='name', unique=True)),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='name')),
                ('dashboard_url', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('permissions', models.ManyToManyField(blank=True, related_name='account_permissions', to='auth.Permission', verbose_name='Account Permissions')),
            ],
            options={
                'verbose_name': 'Account UserGroup',
                'verbose_name_plural': 'account groups',
            },
            managers=[
                ('objects', accounts.models.group.managers.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('last_updated_by', models.UUIDField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('meta', models.JSONField(blank=True, default=dict, null=True)),
                ('is_owner', models.BooleanField(default=False)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.usergroup')),
            ],
            options={
                'unique_together': {('group', 'account')},
            },
        ),
    ]
